require "test_helper"

class ProductExportImportTest < ActiveSupport::TestCase


  test "export and import should result in identical database state" do
    # todo: add into fixtures
    products(:oxford).link! products(:"maxicosi infant adapter")

    # create product with commas in name
    Product.create!(
      name: "test, product",
      productable: Seat.new(),
      brand: brands(:maxicosi),
      url: "http://example.com/test-product",
    )

    # 1. Save initial database state
    initial_products = Product.all.map(&:serialize)
    initial_compatibilities = ProductAdapter.all.map(&:serialize)
    initial_tags = Tag.all.map(&:serializable_hash)

    # 2. Run exports
    products_csv = Product.export_all
    compatibilities_csv = Product.export_compatible
    tags_csv = Product.export_tags

    ProductAdapter.destroy_all
    Product.destroy_all
    Tag.destroy_all

    # 4. Run imports on the exported files
    Product.import(prepare_test_file(products_csv, "product_export"))
    Product.import(prepare_test_file(compatibilities_csv, "compatible_export"))
    Product.import(prepare_test_file(tags_csv, "tags_export"))

    # 5. Check that nothing has changed
    assert_products_are_unchanged(initial_products)
    assert_capabilities_are_unchanged(initial_compatibilities)
    assert_tags_are_unchanged(initial_tags)
  end

  private

  def assert_capabilities_are_unchanged(initial_compatibilities)
    initial = initial_compatibilities.map { |c| [c[:product]['slug'], c[:adapter]['slug']] }
    after = ProductAdapter.all.map { |c| [c.product.slug, c.adapter.product.slug] }
    assert_equal initial, after
  end

  def assert_products_are_unchanged(initial_products)
    before = initial_products.sort_by { |p| p['slug'] }
                             .map { |p| strip_autogenerated_fields(p) }
    after = Product.all.map(&:serialize).sort_by { |p| p['slug'] }
                   .map { |p| strip_autogenerated_fields(p) }
    assert_equal before, after
  end

  def assert_tags_are_unchanged(initial_tags)
    assert_equal initial_tags.map { |t| t['label'] }, Tag.all.map(&:label)
  end

  # @return [Hash]
  def strip_autogenerated_fields(hash_object)
    unless hash_object.is_a?(Hash)
      return hash_object
    end

    hash_object.delete('id')
    hash_object.delete('created_at')
    hash_object.delete('updated_at')
    hash_object.delete('slug')
    hash_object.delete('productable_id')
    hash_object.delete('brand_id')
    hash_object.delete('image') # todo: import/export of image data
    hash_object
  #   recur if any of the values is a hash
    hash_object.each do |key, value|
      if value.is_a?(Hash)
        hash_object[key] = strip_autogenerated_fields(value)
      end
      if value.is_a?(Array)
        hash_object[key] = value.map { |v| strip_autogenerated_fields(v) }
      end
    end

    hash_object
  end

  def prepare_test_file(content, filename)
    temp_file = Tempfile.new([filename, '.csv'])
    temp_file.write(content)
    temp_file.rewind
    Rack::Test::UploadedFile.new(temp_file, "text/csv", original_filename: filename + ".csv")
  end
end